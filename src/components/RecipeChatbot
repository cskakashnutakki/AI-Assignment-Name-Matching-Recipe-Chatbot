import React, { useState, useRef, useEffect } from 'react';
import { Send, ChefHat, Bot, User, Sparkles } from 'lucide-react';
import { RECIPE_DATABASE, findRecipesByIngredients, Recipe } from '../data/recipes';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

function parseIngredients(message: string): string[] {
  const cleanMessage = message.toLowerCase()
    .replace(/[.,!?;]/g, '')
    .replace(/\b(i have|with|and|plus|also|\&)\b/g, ' ');
  
  return cleanMessage
    .split(/\s+/)
    .filter(word => word.length > 2)
    .filter(word => !['the', 'can', 'you', 'suggest', 'recipe', 'make', 'cook', 'want', 'need'].includes(word));
}

export default function RecipeChatbot() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: "Hello! I'm your recipe assistant. Tell me what ingredients you have, and I'll suggest delicious recipes you can make! Try saying something like 'I have eggs and onions'.",
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputMessage,
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate API processing delay
    setTimeout(() => {
      const ingredients = parseIngredients(inputMessage);
      const matchingRecipes = findRecipesByIngredients(ingredients);
      
      let botResponse = "";
      
      if (matchingRecipes.length === 0) {
        botResponse = "I couldn't find any recipes with those ingredients. Try mentioning common ingredients like eggs, chicken, rice, pasta, vegetables, or onions!";
      } else {
        const topRecipe = matchingRecipes[0];
        botResponse = `Great! Based on your ingredients, I recommend making **${topRecipe.name}**!\n\n`;
        botResponse += `ðŸ•’ **Prep Time:** ${topRecipe.prepTime} | **Cook Time:** ${topRecipe.cookTime}\n`;
        botResponse += `ðŸ‘¥ **Serves:** ${topRecipe.servings} people\n\n`;
        botResponse += `**Ingredients needed:**\n${topRecipe.ingredients.map(ing => `â€¢ ${ing}`).join('\n')}\n\n`;
        botResponse += `**Instructions:**\n${topRecipe.instructions.map((step, idx) => `${idx + 1}. ${step}`).join('\n')}`;
        
        if (matchingRecipes.length > 1) {
          botResponse += `\n\n**Other recipes you can try:** ${matchingRecipes.slice(1, 3).map(r => r.name).join(', ')}`;
        }
        
        botResponse += `\n\n**Difficulty:** ${topRecipe.difficulty} | **Cuisine:** ${topRecipe.cuisine}`;
      }

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        isUser: false,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-3xl font-bold text-gray-900 mb-2">Recipe Chatbot</h2>
        <p className="text-gray-600">AI-powered recipe suggestions based on your ingredients</p>
      </div>

      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        <div className="bg-gradient-to-r from-emerald-500 to-teal-500 p-4">
          <div className="flex items-center">
            <ChefHat className="h-6 w-6 text-white mr-2" />
            <span className="text-white font-semibold">Recipe Assistant</span>
            <div className="ml-auto">
              <div className="flex items-center space-x-1">
                <div className="w-2 h-2 bg-green-300 rounded-full animate-pulse"></div>
                <span className="text-green-100 text-sm">Online</span>
              </div>
            </div>
          </div>
        </div>

        <div className="h-96 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                  message.isUser
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100 text-gray-800'
                }`}
              >
                <div className="flex items-start">
                  {!message.isUser && (
                    <Bot className="h-4 w-4 mr-2 mt-0.5 text-emerald-600" />
                  )}
                  {message.isUser && (
                    <User className="h-4 w-4 mr-2 mt-0.5 text-blue-200" />
                  )}
                  <div className="flex-1">
                    <div className="whitespace-pre-line text-sm">
                      {message.text.split('**').map((part, index) => 
                        index % 2 === 1 ? <strong key={index}>{part}</strong> : part
                      )}
                    </div>
                    <div className={`text-xs mt-1 ${
                      message.isUser ? 'text-blue-100' : 'text-gray-500'
                    }`}>
                      {message.timestamp.toLocaleTimeString([], { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}

          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-gray-100 text-gray-800 px-4 py-2 rounded-lg">
                <div className="flex items-center">
                  <Bot className="h-4 w-4 mr-2 text-emerald-600" />
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        <div className="border-t p-4">
          <div className="flex space-x-2">
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Tell me what ingredients you have..."
              className="flex-1 px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200"
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isTyping}
              className="px-4 py-2 bg-emerald-500 text-white rounded-lg hover:bg-emerald-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 flex items-center"
            >
              <Send className="h-4 w-4" />
            </button>
          </div>
          <div className="flex items-center justify-center mt-2">
            <Sparkles className="h-4 w-4 text-emerald-500 mr-1" />
            <span className="text-xs text-gray-500">Powered by AI Recipe Engine</span>
          </div>
        </div>
      </div>
    </div>
  );
}
